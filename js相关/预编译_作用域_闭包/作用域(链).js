// AO -> function 独立的仓库

// 函数其实也是对象 
// js引擎中 对象会有一些用户无法访问的属性，隐式属性
// [[scope]] 隐式属性 存放作用域链
// GO 全局的执行期上下文
// AO 函数的执行期上下文 AO 函数执行完就销毁 是一个即时的存储
function a() {
    function b() {
        var b = 2;
    }
    var a = 1;
    b();
}
var c = 3;
a();
/** 1
 *  [[scope]] ：
 *  当a函数被定义时 系统生成 [[scope]] 属性 [[scope]] 保存
 *  该函数的作用域链，该作用域链的第0为存的是当前环境的GO，
 *  GO里存着全局下的所有对象，其中包含函数a和变量c
 *  此时作用域链为 a.[[scope]] = GO
 */

/** 2
 * 当a函数执行的前一刻 预编译生成a的AO阶段
 * a的AO会把位于第0位的GO往下挤 挤到第1位 ，把自己的AO放到第0位
 * 查找访问变量时，是从作用域链顶端（0）往下查找，找到就返回，没找到就继续往下找
 * 此时作用域链为 a.[[scope]] =  a.AO -> GO
 */
/** 3 
 *  a执行中，b定义时
 *  此时作用域链为 b.[[scope]] =  a.AO -> GO
 */
/** 4
 * 当b函数执行的前一刻 预编译生成b的AO阶段
 * 此时作用域链为 b.[[scope]] =  b.AO -> a.AO -> GO
 * 同理，查找变量也是从顶端开始
 */
/** 5
 *  b函数执行完 b.AO销毁 作用域链回到b函数定义的状态 b.[[scope]] = a.AO -> GO
 */
/** 6
 *  a函数执行完 a.AO销毁 作用域链回到a函数定义的状态 a.[[scope]] = GO
 */

